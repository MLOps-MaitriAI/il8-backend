name: Merge Staging to Production (FastAPI Backend, Excluding .github)

on:
  push:
    branches:
      - staging

jobs:
  test_and_build_backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'  # Specify your Python version
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run tests
        run: |
          # Add your test command here, for example:
          # python -m pytest tests/
          echo "Running tests... (Add your test command)"
      
      - name: Lint with flake8
        run: |
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

  create_pull_request:
    needs: test_and_build_backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Create temporary branch without .github folder
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git checkout -b temp-staging-branch staging
          git rm -r --cached .github
          git commit -m "Remove .github folder for merging"
      
      - name: Create Pull Request
        env:
          GITHUB_TOKEN: ${{ secrets.IL8_CI_CD }}
        run: |
          pr_url=$(gh pr create --base production --head temp-staging-branch --title "Merge Staging to Production (FastAPI Backend, Excluding .github)" --body "This PR merges the latest changes from the staging branch into the production branch for the FastAPI backend, excluding the .github folder. Please review and approve to proceed with the merge.")
          echo "PR_URL=$pr_url" >> $GITHUB_ENV
      
      - name: Output PR URL
        run: echo "Pull request created - ${{ env.PR_URL }}"

  merge_pull_request:
    needs: create_pull_request
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Wait for PR Approval
        id: approval
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ secrets.IL8_CI_CD }}
          approvers: MLOps-MaitriAI
      
      - name: Merge Pull Request
        if: steps.approval.outputs.approved == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.IL8_CI_CD }}
        run: |
          pr_number=$(echo ${{ env.PR_URL }} | awk -F'/' '{print $NF}')
          gh pr merge $pr_number --merge
      
      - name: Cleanup temporary branch
        if: steps.approval.outputs.approved == 'true'
        run: |
          git push origin --delete temp-staging-branch

  deploy_to_production:
    needs: merge_pull_request
    runs-on: ubuntu-latest
    steps:
      - name: Checkout production code
        uses: actions/checkout@v2
        with:
          ref: production
      
      - name: Deploy to production server
        env:
          SERVER_SSH_KEY: ${{ secrets.PRODUCTION_SERVER_SSH_KEY }}
          SERVER_USER: ${{ secrets.PRODUCTION_SERVER_USER }}
          SERVER_HOST: ${{ secrets.PRODUCTION_SERVER_HOST }}
        run: |
          echo "$SERVER_SSH_KEY" > deploy_key
          chmod 600 deploy_key
          scp -i deploy_key -r api auth db main1.py main.py requirements.txt static wait_for_db.py $SERVER_USER@$SERVER_HOST:/path/to/production/directory
          ssh -i deploy_key $SERVER_USER@$SERVER_HOST "cd /path/to/production/directory && pip install -r requirements.txt && systemctl restart your-fastapi-service"
          rm -f deploy_key
